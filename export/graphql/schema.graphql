input AuthProviderCredentialsInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of CreateSurveyQuestionResponse
"""
type CreateSurveyQuestionResponsePayload {
  questionResponse: SurveyQuestionResponse!
}

"""
Autogenerated return type of CreateSurveyResponse
"""
type CreateSurveyResponsePayload {
  response: SurveyResponse!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type MeetingDuration {
  id: ID!
  minutes: Int!
  startedAt: ISO8601DateTime!
}

type Mutation {
  createSurveyQuestionResponse(optionIds: [ID!], questionId: ID!, reply: String, surveyResponseId: ID!): CreateSurveyQuestionResponsePayload
  createSurveyResponse(studentId: ID!, surveyId: ID!, userId: ID!): CreateSurveyResponsePayload
  signInUser(credentials: AuthProviderCredentialsInput!): SignInUserPayload!
  updateUser(data: UpdateUserInput!): User!
  updateUserPassword(oldPassword: String!, password: String!): Boolean!
}

type Query {
  """
  Currently logged in user
  """
  currentUser: User

  """
  A single student
  """
  student(id: ID!): Student!

  """
  All survey_responses for a specific student associated with signed in volunteer
  """
  studentSurveyResponses(id: ID!): [SurveyResponse!]

  """
  All students associated with signed in volunteer
  """
  students: [Student!]

  """
  A single survey
  """
  survey(id: ID!): Survey!

  """
  A single survey response
  """
  surveyResponse(id: ID!): SurveyResponse!

  """
  All survey_responses associated with signed in volunteer
  """
  surveyResponses: [SurveyResponse!]
}

type Question {
  description: String
  heading: String
  id: ID!
  options: [QuestionOption!]
  prompt: String!
  type: String!
}

type QuestionOption {
  id: ID!
  label: String!
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  token: String
  user: User
}

type Student {
  createdAt: ISO8601DateTime!
  dateOfBirth: ISO8601DateTime
  email: String
  emergencyContactName: String
  emergencyContactPhoneNumber: String
  guardianName: String
  guardianPhoneNumber: String
  id: ID!
  initials: String!
  name: String!
  nickname: String
  updatedAt: ISO8601DateTime!
}

type Survey {
  id: ID!
  name: String!
  questions: [Question!]
}

type SurveyQuestionResponse {
  id: ID!
}

type SurveyResponse {
  id: ID!
  meetingDuration: MeetingDuration
  student: Student!
  survey: Survey!
  volunteer: User!
}

input UpdateUserInput {
  email: String
  firstName: String!
  lastName: String!
  phoneNumber: String
}

type User {
  createdAt: ISO8601DateTime!
  email: String
  firstName: String!
  id: ID!
  initials: String!
  lastName: String!
  name: String!
  phoneNumber: String
  role: String
  updatedAt: ISO8601DateTime!
}
